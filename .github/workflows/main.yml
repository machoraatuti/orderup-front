# Git Workflow for Development Team

## 1️⃣ Overview
This document outlines the Git workflow for efficient collaboration in our development team. It ensures code quality, smooth deployments, and proper version control.

## 2️⃣ Branching Strategy
We follow a structured branching model to manage features, bug fixes, and releases efficiently:

### 🔹 Main Branches
- main → Stable, production-ready code.
- dev → Integration branch for new features and fixes before release.

### 🔹 Supporting Branches
- feature/ → New features (e.g., `feature/auth-module`).
- fix/ → Bug fixes (e.g., `fix/cart-bug`).
- hotfix/ → Critical production fixes (e.g., `hotfix/payment-issue`).
- release/ → Pre-release stabilization (e.g., `release/v1.0`).

## 3️⃣ Workflow Process
### 📌 Step 1: Clone the Repository (First-Time Setup)
```bash
git clone https://github.com/org-name/repo-name.git
cd repo-name
git checkout develop
```

### 📌 Step 2: Create a New Feature Branch
```bash
git checkout -b feature/new-feature develop
```

### 📌 Step 3: Make Changes & Commit
Follow **conventional commit messages**:
```bash
git commit -m "feat(auth): Implement login functionality"
```

### 📌 Step 4: Push to Remote & Open a PR
```bash
git push origin feature/new-feature
```
- Open a Pull Request (PR) **feature/new-feature → develop**.
- Request reviews before merging.

### 📌 Step 5: Merge Approved PRs
- Mishael reviews & approves.
- **Squash & Merge** to keep history clean.

### 📌 Step 6: Release Process
Once all features are merged into `develop`:
```bash
git checkout -b release/v1.0 develop
git push origin release/v1.0
```
- Perform final testing.
- Merge `release/v1.0` into `main`.
- Deploy production from `main`.

## 4️⃣ Hotfixes (Emergency Fixes)
```bash
git checkout -b hotfix/urgent-fix main
# Fix issue
git commit -m "fix: urgent bug in checkout"
git push origin hotfix/urgent-fix
git checkout main
git merge hotfix/urgent-fix
git push origin main
```
- Deploy immediately.
- Merge changes back into `develop`.

## 5️⃣ Git Best Practices
✅ No direct commits to `main` or `develop`.
✅ Every feature/fix must have a dedicated branch.
✅ Always create a **Pull Request** (PR) for merging.
✅ Code reviews are **mandatory** before merging.
✅ Ensure CI/CD tests pass before merging.
✅ Keep commits atomic and messages meaningful.

## 6️⃣ CI/CD Automation (GitHub Actions)
Mishael will configure GitHub Actions for:
- **Run tests on PRs** before merging.
- **Deploy automatically** when `main` is updated.

## 7️⃣ Conclusion
This workflow ensures smooth collaboration, high-quality code, and efficient deployment. If updates are needed, coordinate with the DevOps team (Mishael) to refine processes.

